/*
************************ viclara nextflow config file **********************
******************* Default config options for all environments ************
*/

manifest {
  name = 'viclara'
  author = 'John Juma'
  description = 'Nextflow workflow for virus classification and reference-based assembly'
  mainScript = 'viclara.nf'
  nextflowVersion = '>=20.04.1'
  version = '1.0'
}

/*
*********************** Global default params *********************************
*/
params {

    help = false
    profile = false
    reads = "testdata/{1,2}.fastq.gz"
    readPaths = null
    reference = false
    singleEnd = false

    removePhiX = false
    hg = false
    saveReference = false
    saveGenomeIndex = false
    saveKrakenDB = false

    trimmer = 'trimmomatic'
    adapters = false
    encoding = 'phred33'
    leading = 3
    trailing = 3
    average_qual = 20
    min_length = 50
    saveTrimmed = false

    aligner = 'bwa'
    saveAlignedIntermediates = false

    classify = false
    krn2_task = false
    krn2_db = false
    krn2_lib = false

    skipQC = false
    skipMultiQC = false
    skipFastQC = false
    skipTrimming = false

    outdir = 'results'
    name = false
    multiqc_config = "$baseDir/assets/multiqc_config.yaml"
    tracedir = "${params.outdir}/pipeline_info"

    hostnames = false
    monochrome_logs = false
}

// Load base.config by default for all pipelines
includeConfig 'configs/base.config'


profiles {

  // containers
  conda {
    process.conda = "$baseDir/environment.yaml" 
  }

  
  // engines
  docker { 
    docker.enabled = true 
    }

  singularity { 
    singularity.enabled = true
    singularity.autoMounts = true 
    }

  // 
  debug { 
    process.beforeScript = 'echo $HOSTNAME' 
    }

  test { 
    includeConfig 'configs/test.config' 
    }

  // executors
  slurm {
        workDir = params.workdir
        executor {
            name = "slurm"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/slurm.config'
    }
}

// Increase time available to build conda environment
conda { createTimeout = "1 h" }


// reference genomes base location
params.igenomes_base = "$baseDir/igenomes"

// Load igenomes.config if required
includeConfig 'configs/igenomes.config'


// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

env {
  NXF_OPTS="-Xms400M"
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}